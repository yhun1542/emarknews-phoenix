#!/usr/bin/env node

const axios = require('axios');
const fs = require('fs');

class FrontendDebugger {
  constructor() {
    this.baseUrl = 'https://emarknews.com';
    this.errors = [];
  }

  log(message) {
    console.log(`üîç ${message}`);
  }

  error(message) {
    console.log(`‚ùå ${message}`);
    this.errors.push(message);
  }

  success(message) {
    console.log(`‚úÖ ${message}`);
  }

  async testFrontendHtml() {
    this.log('ÌîÑÎ°†Ìä∏ÏóîÎìú HTML Íµ¨Ï°∞ ÌôïÏù∏...');
    
    try {
      const response = await axios.get(this.baseUrl);
      const html = response.data;
      
      // JavaScript ÌååÏùº Ï∞∏Ï°∞ ÌôïÏù∏
      const jsIncludes = html.match(/<script[^>]*src=["']([^"']*\.js)["'][^>]*>/gi);
      if (jsIncludes) {
        this.success(`JavaScript ÌååÏùº Ï∞∏Ï°∞ Î∞úÍ≤¨: ${jsIncludes.length}Í∞ú`);
        jsIncludes.forEach(include => {
          this.log(`  - ${include}`);
        });
      } else {
        this.error('Ïô∏Î∂Ä JavaScript ÌååÏùº Ï∞∏Ï°∞Í∞Ä ÏóÜÏùå!');
      }
      
      // Ïù∏ÎùºÏù∏ JavaScript ÌôïÏù∏
      const inlineJs = html.match(/<script[^>]*>(.*?)<\/script>/gis);
      if (inlineJs) {
        this.success(`Ïù∏ÎùºÏù∏ JavaScript Î∞úÍ≤¨: ${inlineJs.length}Í∞ú`);
        
        // fetch API ÏÇ¨Ïö© ÌôïÏù∏
        const hasFetch = html.includes('fetch(');
        if (hasFetch) {
          this.success('fetch API ÏÇ¨Ïö© ÌôïÏù∏Îê®');
        } else {
          this.error('fetch API ÏÇ¨Ïö©Ïù¥ ÌôïÏù∏ÎêòÏßÄ ÏïäÏùå');
        }
        
        // loadNews Ìï®Ïàò ÌôïÏù∏
        const hasLoadNews = html.includes('loadNews') || html.includes('loadSection');
        if (hasLoadNews) {
          this.success('Îâ¥Ïä§ Î°úÎî© Ìï®Ïàò ÌôïÏù∏Îê®');
        } else {
          this.error('Îâ¥Ïä§ Î°úÎî© Ìï®ÏàòÍ∞Ä ÏóÜÏùå');
        }
        
        // API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌôïÏù∏
        const apiCalls = html.match(/fetch\(['"`]([^'"`]*api[^'"`]*)['"`]\)/gi);
        if (apiCalls) {
          this.success(`API Ìò∏Ï∂ú ÏΩîÎìú Î∞úÍ≤¨: ${apiCalls.length}Í∞ú`);
          apiCalls.forEach(call => {
            this.log(`  - ${call}`);
          });
        } else {
          this.error('API Ìò∏Ï∂ú ÏΩîÎìúÍ∞Ä ÏóÜÏùå!');
        }
        
      } else {
        this.error('JavaScript ÏΩîÎìúÍ∞Ä Ï†ÑÌòÄ ÏóÜÏùå!');
      }
      
      // DOM ÏöîÏÜå ÌôïÏù∏
      const hasNewsGrid = html.includes('news-grid');
      if (hasNewsGrid) {
        this.success('news-grid ÏöîÏÜå ÌôïÏù∏Îê®');
      } else {
        this.error('news-grid ÏöîÏÜåÍ∞Ä ÏóÜÏùå');
      }
      
      const hasSystemStatus = html.includes('system-status');
      if (hasSystemStatus) {
        this.success('system-status ÏöîÏÜå ÌôïÏù∏Îê®');
      } else {
        this.error('system-status ÏöîÏÜåÍ∞Ä ÏóÜÏùå');
      }
      
    } catch (error) {
      this.error(`HTML ÌéòÏù¥ÏßÄ Î°úÎìú Ïã§Ìå®: ${error.message}`);
    }
  }

  async testApiDirectly() {
    this.log('API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏßÅÏ†ë ÌÖåÏä§Ìä∏...');
    
    const endpoints = [
      '/health',
      '/api/news/world',
      '/api/news/kr',
      '/api/currency'
    ];
    
    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(`${this.baseUrl}${endpoint}`, {
          timeout: 10000
        });
        
        if (endpoint === '/health') {
          this.success(`${endpoint}: Ï†ïÏÉÅ (${response.status})`);
          this.log(`  Health data: ${JSON.stringify(response.data)}`);
        } else if (endpoint.startsWith('/api/news/')) {
          if (response.data.success && response.data.data.articles) {
            const count = response.data.data.articles.length;
            this.success(`${endpoint}: Ï†ïÏÉÅ (${count}Í∞ú Í∏∞ÏÇ¨)`);
            
            // Ï≤´ Î≤àÏß∏ Í∏∞ÏÇ¨ Íµ¨Ï°∞ ÌôïÏù∏
            if (count > 0) {
              const firstArticle = response.data.data.articles[0];
              const hasRequiredFields = firstArticle.title && firstArticle.description && firstArticle.source;
              if (hasRequiredFields) {
                this.success(`  Í∏∞ÏÇ¨ Íµ¨Ï°∞: Ï†ïÏÉÅ (title, description, source Ìè¨Ìï®)`);
              } else {
                this.error(`  Í∏∞ÏÇ¨ Íµ¨Ï°∞: Î∂àÏôÑÏ†Ñ (ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ)`);
              }
            }
          } else {
            this.error(`${endpoint}: Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÎòêÎäî ÏûòÎ™ªÎêú ÏùëÎãµ Íµ¨Ï°∞`);
            this.log(`  Response: ${JSON.stringify(response.data)}`);
          }
        } else {
          this.success(`${endpoint}: Ï†ïÏÉÅ (${response.status})`);
        }
        
      } catch (error) {
        this.error(`${endpoint}: Ïã§Ìå® - ${error.message}`);
      }
    }
  }

  async testCORS() {
    this.log('CORS ÏÑ§Ï†ï ÌôïÏù∏...');
    
    try {
      const response = await axios.options(`${this.baseUrl}/api/news/world`);
      const corsHeaders = {
        'Access-Control-Allow-Origin': response.headers['access-control-allow-origin'],
        'Access-Control-Allow-Methods': response.headers['access-control-allow-methods'],
        'Access-Control-Allow-Headers': response.headers['access-control-allow-headers']
      };
      
      this.success('CORS Ìó§Îçî ÌôïÏù∏Îê®:');
      Object.entries(corsHeaders).forEach(([key, value]) => {
        this.log(`  ${key}: ${value || 'not set'}`);
      });
      
    } catch (error) {
      this.error(`CORS ÌÖåÏä§Ìä∏ Ïã§Ìå®: ${error.message}`);
    }
  }

  async generateFixedHtml() {
    this.log('ÏàòÏ†ïÎêú HTML ÏÉùÏÑ± Ï§ë...');
    
    const fixedHtml = `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üî• EmarkNews Phoenix</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .status {
            background: rgba(255,255,255,0.9);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .debug-info {
            background: rgba(255,255,255,0.9);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .news-sections {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .section-tab {
            background: rgba(255,255,255,0.9);
            padding: 15px 25px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: bold;
            border: none;
            font-size: 16px;
        }

        .section-tab:hover {
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .section-tab.active {
            background: #4CAF50;
            color: white;
        }

        .news-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .news-item {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            border-left: 4px solid #4CAF50;
        }

        .news-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px rgba(0,0,0,0.15);
        }

        .news-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #2c3e50;
            line-height: 1.4;
        }

        .news-description {
            color: #7f8c8d;
            margin-bottom: 15px;
            line-height: 1.6;
        }

        .news-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
            color: #95a5a6;
        }

        .news-source {
            font-weight: bold;
            color: #3498db;
        }

        .news-tags {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
        }

        .tag {
            background: #e74c3c;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .loading {
            text-align: center;
            padding: 50px;
            font-size: 18px;
            color: white;
        }

        .error {
            background: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .debug-log {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 12px;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üî• EmarkNews Phoenix</h1>
            <p>AI-powered Real-time News Aggregator v7.0</p>
        </div>

        <div class="status">
            <h3>System Status</h3>
            <p id="system-status">Checking...</p>
        </div>

        <div class="debug-info">
            <h3>üîç Debug Information</h3>
            <div id="debug-log" class="debug-log">Initializing debug mode...</div>
        </div>

        <div class="news-sections">
            <button class="section-tab active" onclick="loadSection('world')">üåç World</button>
            <button class="section-tab" onclick="loadSection('kr')">üá∞üá∑ Korea</button>
            <button class="section-tab" onclick="loadSection('japan')">üáØüáµ Japan</button>
            <button class="section-tab" onclick="loadSection('tech')">üíª Tech</button>
            <button class="section-tab" onclick="loadSection('business')">üíº Business</button>
            <button class="section-tab" onclick="loadSection('buzz')">üî• Buzz</button>
        </div>

        <div class="news-grid" id="news-grid">
            <div class="loading">Loading news...</div>
        </div>
    </div>

    <script>
        let currentSection = 'world';
        let debugLog = [];

        function addDebugLog(message) {
            console.log(message);
            debugLog.push(\`[\${new Date().toLocaleTimeString()}] \${message}\`);
            const debugElement = document.getElementById('debug-log');
            if (debugElement) {
                debugElement.innerHTML = debugLog.slice(-20).join('\\n');
                debugElement.scrollTop = debugElement.scrollHeight;
            }
        }

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            addDebugLog('üöÄ EmarkNews Ï¥àÍ∏∞Ìôî ÏãúÏûë');
            checkSystemStatus();
            loadSection('world');
        });

        // Check system status
        async function checkSystemStatus() {
            addDebugLog('üîç ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...');
            try {
                const response = await fetch('/health');
                addDebugLog(\`‚úÖ Health ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏùëÎãµ: \${response.status}\`);
                
                if (!response.ok) {
                    throw new Error(\`HTTP \${response.status}\`);
                }
                
                const data = await response.json();
                addDebugLog(\`üìä Health Îç∞Ïù¥ÌÑ∞: \${JSON.stringify(data)}\`);
                
                let statusHTML = \`
                    <p>‚úÖ Status: \${data.status}</p>
                    <p>üìå Version: \${data.version || '7.0.0'}</p>
                    <p>üîå Redis: \${data.redis?.status || 'unknown'}</p>
                    <p>üåç Environment: \${data.environment || 'production'}</p>
                \`;
                
                document.getElementById('system-status').innerHTML = statusHTML;
                addDebugLog('‚úÖ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
                
            } catch (error) {
                addDebugLog(\`‚ùå ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: \${error.message}\`);
                document.getElementById('system-status').innerHTML = '<p>‚ùå System check failed</p>';
            }
        }

        // Load news section
        async function loadSection(section) {
            addDebugLog(\`üì∞ ÏÑπÏÖò Î°úÎî© ÏãúÏûë: \${section}\`);
            currentSection = section;
            
            // Update active tab
            document.querySelectorAll('.section-tab').forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            // Show loading
            document.getElementById('news-grid').innerHTML = '<div class="loading">Loading news...</div>';
            
            try {
                addDebugLog(\`üîó API Ìò∏Ï∂ú: /api/news/\${section}\`);
                const response = await fetch(\`/api/news/\${section}\`);
                
                addDebugLog(\`üì° API ÏùëÎãµ ÏÉÅÌÉú: \${response.status}\`);
                
                if (!response.ok) {
                    throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
                }
                
                const data = await response.json();
                addDebugLog(\`üìä API Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: \${JSON.stringify(data).substring(0, 200)}...\`);
                
                if (data.success && data.data && data.data.articles) {
                    addDebugLog(\`‚úÖ \${data.data.articles.length}Í∞ú Í∏∞ÏÇ¨ ÏàòÏã†\`);
                    displayNews(data.data.articles);
                } else {
                    addDebugLog(\`‚ö†Ô∏è ÏòàÏÉÅÏπò Î™ªÌïú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞: \${JSON.stringify(data)}\`);
                    document.getElementById('news-grid').innerHTML = '<div class="error">Îâ¥Ïä§ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Í∞Ä ÏòàÏÉÅÍ≥º Îã§Î¶ÖÎãàÎã§</div>';
                }
            } catch (error) {
                addDebugLog(\`‚ùå Îâ¥Ïä§ Î°úÎî© Ïã§Ìå®: \${error.message}\`);
                document.getElementById('news-grid').innerHTML = \`<div class="error">ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: \${error.message}</div>\`;
            }
        }

        // Display news articles
        function displayNews(articles) {
            addDebugLog(\`üé® \${articles.length}Í∞ú Í∏∞ÏÇ¨ Î†åÎçîÎßÅ ÏãúÏûë\`);
            
            if (!articles || articles.length === 0) {
                document.getElementById('news-grid').innerHTML = '<div class="error">ÌëúÏãúÌï† Îâ¥Ïä§Í∞Ä ÏóÜÏäµÎãàÎã§</div>';
                return;
            }
            
            let newsHTML = '';
            
            articles.forEach((article, index) => {
                addDebugLog(\`üìÑ Í∏∞ÏÇ¨ \${index + 1} Ï≤òÎ¶¨: \${article.title?.substring(0, 30)}...\`);
                
                const timeAgo = article.timeAgo || formatTimeAgo(article.publishedAt) || 'ÏãúÍ∞Ñ ÎØ∏ÏÉÅ';
                const tags = article.tags || ['ÏùºÎ∞ò'];
                const rating = article.rating || 3;
                const title = article.titleKo || article.title || 'Ï†úÎ™© ÏóÜÏùå';
                const description = article.descriptionKo || article.description || 'ÎÇ¥Ïö© ÏóÜÏùå';
                const source = article.source || 'Unknown';
                
                let tagsHTML = '';
                tags.forEach(tag => {
                    tagsHTML += \`<span class="tag">\${tag}</span>\`;
                });
                
                newsHTML += \`
                    <div class="news-item">
                        <div class="news-tags">\${tagsHTML}</div>
                        <div class="news-title">\${title}</div>
                        <div class="news-description">\${description}</div>
                        <div class="news-meta">
                            <span class="news-source">\${source}</span>
                            <span>‚≠ê \${rating}/5 ‚Ä¢ \${timeAgo}</span>
                        </div>
                    </div>
                \`;
            });
            
            document.getElementById('news-grid').innerHTML = newsHTML;
            addDebugLog(\`‚úÖ \${articles.length}Í∞ú Í∏∞ÏÇ¨ Î†åÎçîÎßÅ ÏôÑÎ£å\`);
        }

        // Format time ago
        function formatTimeAgo(dateString) {
            try {
                if (!dateString) return 'ÏãúÍ∞Ñ ÎØ∏ÏÉÅ';
                
                const now = new Date();
                const published = new Date(dateString);
                const diffMs = now - published;
                const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                
                if (diffHours < 1) return 'Î∞©Í∏à Ï†Ñ';
                if (diffHours < 24) return \`\${diffHours}ÏãúÍ∞Ñ Ï†Ñ\`;
                if (diffDays < 7) return \`\${diffDays}Ïùº Ï†Ñ\`;
                return new Date(published).toLocaleDateString('ko-KR');
            } catch (error) {
                addDebugLog(\`‚ö†Ô∏è ÏãúÍ∞Ñ Ìè¨Îß∑ Ïò§Î•ò: \${error.message}\`);
                return 'ÎÇ†Ïßú ÎØ∏ÏÉÅ';
            }
        }

        // Global error handler
        window.addEventListener('error', function(event) {
            addDebugLog(\`üí• Ï†ÑÏó≠ Ïò§Î•ò: \${event.error?.message || event.message}\`);
        });

        window.addEventListener('unhandledrejection', function(event) {
            addDebugLog(\`üí• Promise Í±∞Î∂Ä: \${event.reason}\`);
        });
    </script>
</body>
</html>`;

    fs.writeFileSync('fixed-index.html', fixedHtml);
    this.success('fixed-index.html ÌååÏùº ÏÉùÏÑ±Îê®');
    this.log('Ïù¥ ÌååÏùºÏùÑ public/index.htmlÎ°ú ÍµêÏ≤¥ÌïòÏÑ∏Ïöî');
  }

  async run() {
    console.log('üîç EmarkNews ÌîÑÎ°†Ìä∏ÏóîÎìú ÎîîÎ≤ÑÍπÖ ÏãúÏûë\n');
    
    await this.testApiDirectly();
    console.log('\n');
    
    await this.testFrontendHtml();
    console.log('\n');
    
    await this.testCORS();
    console.log('\n');
    
    await this.generateFixedHtml();
    console.log('\n');
    
    console.log('üìã Ïò§Î•ò ÏöîÏïΩ:');
    if (this.errors.length === 0) {
      console.log('‚úÖ Ïò§Î•ò ÏóÜÏùå');
    } else {
      this.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }
    
    console.log('\nüéØ Ìï¥Í≤∞ Î∞©Î≤ï:');
    console.log('1. ÏÉùÏÑ±Îêú fixed-index.htmlÏùÑ public/index.htmlÎ°ú ÍµêÏ≤¥');
    console.log('2. git add public/index.html && git commit -m "Fix frontend" && git push');
    console.log('3. Î∞∞Ìè¨ ÏôÑÎ£å ÌõÑ Îã§Ïãú ÌÖåÏä§Ìä∏');
  }
}

// Ïã§Ìñâ
const frontendDebugger = new FrontendDebugger();
frontendDebugger.run().catch(console.error);